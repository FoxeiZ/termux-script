#!/data/data/com.termux/files/usr/bin/bash

if [ $# -eq 0 ]; then
    dialog --msgbox "Usage: termux-file-editor <file>" 8 40
    exit 1
fi

INPUT_FILE="$1"
BASENAME=$(basename "$INPUT_FILE")
NAME="${BASENAME%.*}"
EXT="${BASENAME##*.}"
CURRENT_DIR=$(pwd)
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
CONFIG_FILE="$SCRIPT_DIR/termux-file-editor.conf"
SAVE_CONFIG="1"

if [ "$(uname -o)" = "Cygwin" ]; then
    termux-share() { cygstart "${@: -1}"; }
fi

# Check if file exists
if [ ! -f "$INPUT_FILE" ]; then
    dialog --msgbox "Error: File '$INPUT_FILE' not found!" 8 50
    exit 1
fi

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        # shellcheck source=/dev/null
        source "$CONFIG_FILE" 2>/dev/null || true
    fi
}

save_config() {
    local prefix="$1"
    shift
    local config_data="$*"
    
    if [ -f "$CONFIG_FILE" ]; then
        # Remove existing entries with the same prefix
        grep -v "^${prefix}_" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" 2>/dev/null || true
        mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE" 2>/dev/null || true
    fi
    
    echo "$config_data" >> "$CONFIG_FILE"
}

# Function to compress file and share
compress_and_share() {
    
    # Set defaults from config or fallback values
    DEFAULT_FILENAME_TEMPLATE="${COMPRESS_FILENAME_TEMPLATE:-%name_%date.%ext}"
    DEFAULT_COMPRESSION_METHOD="${COMPRESS_COMPRESSION_METHOD:-7z}"
    DEFAULT_COMPRESSION_LEVEL="${COMPRESS_COMPRESSION_LEVEL:-5}"
    DEFAULT_PASSWORD="${COMPRESS_PASSWORD:-}"

    if ! FORM_DATA=$(dialog --clear --backtitle "Compress and Share" \
        --title "Compression Options" \
        --form "Configure compression settings:" 17 70 4 \
        "Filename template:" 1 1 "$DEFAULT_FILENAME_TEMPLATE" 1 20 40 0 0 \
        "Compression method:" 2 1 "$DEFAULT_COMPRESSION_METHOD" 2 20 10 0 0 \
        "Compression level (0-9):" 3 1 "$DEFAULT_COMPRESSION_LEVEL" 3 25 5 0 0 \
        "Password (optional):" 4 1 "$DEFAULT_PASSWORD" 4 20 30 0 0 \
        2>&1 >/dev/tty); then
        return
    fi

    FILENAME_TEMPLATE=$(echo "$FORM_DATA" | sed -n '1p')
    COMPRESSION_METHOD=$(echo "$FORM_DATA" | sed -n '2p')
    COMPRESSION_LEVEL=$(echo "$FORM_DATA" | sed -n '3p')
    PASSWORD=$(echo "$FORM_DATA" | sed -n '4p')

    if [ "$SAVE_CONFIG" = "1" ]; then
        save_config "COMPRESS" "COMPRESS_FILENAME_TEMPLATE=\"$FILENAME_TEMPLATE\"
COMPRESS_COMPRESSION_METHOD=\"$COMPRESSION_METHOD\"
COMPRESS_COMPRESSION_LEVEL=\"$COMPRESSION_LEVEL\"
COMPRESS_PASSWORD=\"$PASSWORD\""
    fi

    CURRENT_DATE=$(date +"%Y%m%d_%H%M%S")
    OUTPUT_NAME="$FILENAME_TEMPLATE"
    OUTPUT_NAME="${OUTPUT_NAME//%name/$NAME}"
    OUTPUT_NAME="${OUTPUT_NAME//%date/$CURRENT_DATE}"
    OUTPUT_NAME="${OUTPUT_NAME//%original_ext/$EXT}"
    
    if [ "$COMPRESSION_METHOD" = "7z" ]; then
        OUTPUT_NAME="${OUTPUT_NAME//%ext/7z}"
        OUTPUT_FILE="$CURRENT_DIR/$OUTPUT_NAME"
    else
        OUTPUT_NAME="${OUTPUT_NAME//%ext/zip}"
        OUTPUT_FILE="$CURRENT_DIR/$OUTPUT_NAME"
    fi

    {
        echo "XXX"
        echo "0"
        echo "Starting compression..."
        echo "XXX"
        
        if [ -n "$PASSWORD" ]; then
            if [ "$COMPRESSION_METHOD" = "7z" ]; then
                7z a -mx="$COMPRESSION_LEVEL" -p"$PASSWORD" "$OUTPUT_FILE" "$INPUT_FILE" >/dev/null 2>&1
            else
                7z a -tzip -mx="$COMPRESSION_LEVEL" -p"$PASSWORD" "$OUTPUT_FILE" "$INPUT_FILE" >/dev/null 2>&1
            fi
        else
            if [ "$COMPRESSION_METHOD" = "7z" ]; then
                7z a -mx="$COMPRESSION_LEVEL" "$OUTPUT_FILE" "$INPUT_FILE" >/dev/null 2>&1
            else
                7z a -tzip -mx="$COMPRESSION_LEVEL" "$OUTPUT_FILE" "$INPUT_FILE" >/dev/null 2>&1
            fi
        fi
        
        echo "XXX"
        echo "50"
        echo "Compression completed. Preparing to share..."
        echo "XXX"
        
        sleep 1
        
        echo "XXX"
        echo "100"
        echo "Done!"
        echo "XXX"
    } | dialog --backtitle "Compress and Share" --title "Progress" --gauge "Please wait..." 10 70 0

    if [ -f "$OUTPUT_FILE" ]; then
        termux-share -a send "$OUTPUT_FILE"
        dialog --msgbox "File compressed and shared successfully!\nOutput: $OUTPUT_NAME" 8 60
    else
        dialog --msgbox "Error: Compression failed!" 8 40
    fi
}

reduce_and_share() {
    FILE_TYPE=$(file -b --mime-type "$INPUT_FILE" 2>/dev/null)
    
    case $FILE_TYPE in
        image/*)
            reduce_image_and_share
            ;;
        video/*)
            reduce_video_and_share
            ;;
        *)
            dialog --msgbox "Error: Unsupported media type. Only video and image files are supported." 8 60
            return
            ;;
    esac
}

reduce_video_and_share() {
    DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$INPUT_FILE" 2>/dev/null)
    ORIGINAL_SIZE=$(du -h "$INPUT_FILE" | cut -f1)
    ORIGINAL_RESOLUTION=$(ffprobe -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$INPUT_FILE" 2>/dev/null)

    DEFAULT_MAX_RESOLUTION="${VIDEO_MAX_RESOLUTION:-1280x720}"
    DEFAULT_TARGET_SIZE="${VIDEO_TARGET_SIZE:-0}"
    DEFAULT_MAX_FPS="${VIDEO_MAX_FPS:-0}"
    DEFAULT_AUDIO_QUALITY="${VIDEO_AUDIO_QUALITY:-3}"
    DEFAULT_VIDEO_CODEC="${VIDEO_VIDEO_CODEC:-h264}"
    DEFAULT_CRF_QUALITY="${VIDEO_CRF_QUALITY:-23}"
    DEFAULT_OUTPUT_TEMPLATE="${VIDEO_OUTPUT_TEMPLATE:-%name_reduced.%ext}"
    DEFAULT_START_TIME="${VIDEO_START_TIME:-}"
    DEFAULT_CUSTOM_FFMPEG_ARGS="${VIDEO_CUSTOM_FFMPEG_ARGS:-}"

    if ! FORM_DATA=$(dialog --clear --backtitle "Reduce Video and Share" \
        --title "FFmpeg Video Reduction Options" \
        --form "Configure video reduction settings:\nOriginal size: $ORIGINAL_SIZE\nOriginal resolution: $ORIGINAL_RESOLUTION" 22 80 9 \
        "Max resolution (e.g., 1280x720):" 1 1 "$DEFAULT_MAX_RESOLUTION" 1 35 20 0 0 \
        "Target file size (MB, 0=auto):" 2 1 "$DEFAULT_TARGET_SIZE" 2 35 10 0 0 \
        "Max FPS (0=keep original):" 3 1 "$DEFAULT_MAX_FPS" 3 35 10 0 0 \
        "Audio quality (0=no audio, 1-5):" 4 1 "$DEFAULT_AUDIO_QUALITY" 4 35 10 0 0 \
        "Video codec:" 5 1 "$DEFAULT_VIDEO_CODEC" 5 35 15 0 0 \
        "CRF quality (18-32, lower=better):" 6 1 "$DEFAULT_CRF_QUALITY" 6 35 10 0 0 \
        "Output filename:" 7 1 "$DEFAULT_OUTPUT_TEMPLATE" 7 35 30 0 0 \
        "Start time (HH:MM:SS, optional):" 8 1 "$DEFAULT_START_TIME" 8 35 15 0 0 \
        "Custom FFmpeg args:" 9 1 "$DEFAULT_CUSTOM_FFMPEG_ARGS" 9 20 40 0 0 \
        2>&1 >/dev/tty); then
        return
    fi

    MAX_RESOLUTION=$(echo "$FORM_DATA" | sed -n '1p')
    TARGET_SIZE=$(echo "$FORM_DATA" | sed -n '2p')
    MAX_FPS=$(echo "$FORM_DATA" | sed -n '3p')
    AUDIO_QUALITY=$(echo "$FORM_DATA" | sed -n '4p')
    VIDEO_CODEC=$(echo "$FORM_DATA" | sed -n '5p')
    CRF_QUALITY=$(echo "$FORM_DATA" | sed -n '6p')
    OUTPUT_TEMPLATE=$(echo "$FORM_DATA" | sed -n '7p')
    START_TIME=$(echo "$FORM_DATA" | sed -n '8p')
    CUSTOM_FFMPEG_ARGS=$(echo "$FORM_DATA" | sed -n '9p')

    if [ "$SAVE_CONFIG" = "1" ]; then
        save_config "VIDEO" "VIDEO_MAX_RESOLUTION=\"$MAX_RESOLUTION\"
VIDEO_TARGET_SIZE=\"$TARGET_SIZE\"
VIDEO_MAX_FPS=\"$MAX_FPS\"
VIDEO_AUDIO_QUALITY=\"$AUDIO_QUALITY\"
VIDEO_VIDEO_CODEC=\"$VIDEO_CODEC\"
VIDEO_CRF_QUALITY=\"$CRF_QUALITY\"
VIDEO_OUTPUT_TEMPLATE=\"$OUTPUT_TEMPLATE\"
VIDEO_START_TIME=\"$START_TIME\"
VIDEO_CUSTOM_FFMPEG_ARGS=\"$CUSTOM_FFMPEG_ARGS\""
    fi

    OUTPUT_NAME="$OUTPUT_TEMPLATE"
    OUTPUT_NAME="${OUTPUT_NAME//%name/$NAME}"
    OUTPUT_NAME="${OUTPUT_NAME//%ext/$EXT}"
    OUTPUT_FILE="$CURRENT_DIR/$OUTPUT_NAME"

    FFMPEG_CMD="ffmpeg -y"
    
    if [ -n "$START_TIME" ]; then
        FFMPEG_CMD="$FFMPEG_CMD -ss $START_TIME"
    fi
    
    FFMPEG_CMD="$FFMPEG_CMD -i \"$INPUT_FILE\" -c:v $VIDEO_CODEC"

    if [ "$MAX_RESOLUTION" != "0" ] && [ -n "$MAX_RESOLUTION" ]; then
        FFMPEG_CMD="$FFMPEG_CMD -vf scale=$MAX_RESOLUTION:force_original_aspect_ratio=decrease"
    fi

    if [ "$MAX_FPS" != "0" ] && [ -n "$MAX_FPS" ]; then
        FFMPEG_CMD="$FFMPEG_CMD -r $MAX_FPS"
    fi

    if [ "$AUDIO_QUALITY" = "0" ]; then
        FFMPEG_CMD="$FFMPEG_CMD -an"
    else
        FFMPEG_CMD="$FFMPEG_CMD -c:a aac -b:a $((AUDIO_QUALITY * 64))k"
    fi

    if [ "$TARGET_SIZE" != "0" ] && [ -n "$TARGET_SIZE" ] && [ -n "$DURATION" ]; then
        # Calculate target bitrate based on file size
        TARGET_BITRATE=$(echo "scale=0; ($TARGET_SIZE * 8192) / $DURATION" | bc 2>/dev/null)
        if [ -n "$TARGET_BITRATE" ] && [ "$TARGET_BITRATE" -gt 0 ]; then
            FFMPEG_CMD="$FFMPEG_CMD -b:v ${TARGET_BITRATE}k -maxrate ${TARGET_BITRATE}k -bufsize $((TARGET_BITRATE * 2))k"
        else
            FFMPEG_CMD="$FFMPEG_CMD -crf $CRF_QUALITY"
        fi
    else
        FFMPEG_CMD="$FFMPEG_CMD -crf $CRF_QUALITY"
    fi

    if [ -n "$CUSTOM_FFMPEG_ARGS" ]; then
        FFMPEG_CMD="$FFMPEG_CMD $CUSTOM_FFMPEG_ARGS"
    fi

    FFMPEG_CMD="$FFMPEG_CMD \"$OUTPUT_FILE\""

    { eval "$FFMPEG_CMD" 2>&1 ; } | dialog --progressbox 30 100

    if [ -f "$OUTPUT_FILE" ]; then
        NEW_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
        termux-share -a send "$OUTPUT_FILE"
        dialog --msgbox "Video reduced and shared successfully!\nOriginal: $ORIGINAL_SIZE -> New: $NEW_SIZE\nOutput: $OUTPUT_NAME" 10 60
    else
        dialog --msgbox "Error: Video conversion failed!\nCommand: $FFMPEG_CMD\nLog: $FFMPEG_LOG" 80 80
    fi
}

reduce_image_and_share() {
    
    ORIGINAL_SIZE=$(du -h "$INPUT_FILE" | cut -f1)
    IMAGE_INFO=$(ffprobe -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$INPUT_FILE" 2>/dev/null)

    DEFAULT_OUTPUT_FORMAT="${IMAGE_OUTPUT_FORMAT:-jpeg}"
    DEFAULT_MAX_RESOLUTION="${IMAGE_MAX_RESOLUTION:-1280x720}"
    DEFAULT_GENERAL_QUALITY="${IMAGE_GENERAL_QUALITY:-5}"
    DEFAULT_OUTPUT_TEMPLATE="${IMAGE_OUTPUT_TEMPLATE:-%name_reduced.%ext}"

    JPEG_STATE="off"
    PNG_STATE="off"
    WEBP_STATE="off"
    
    case "$DEFAULT_OUTPUT_FORMAT" in
        "jpeg") JPEG_STATE="on" ;;
        "png") PNG_STATE="on" ;;
        "webp") WEBP_STATE="on" ;;
        *) JPEG_STATE="on" ;;  # default fallback
    esac
    
    if ! OUTPUT_FORMAT=$(dialog --clear --backtitle "Reduce Image and Share" \
        --title "Select Output Format" \
        --radiolist "Choose output format:" 12 50 3 \
        "jpeg" "JPEG (.jpg)" "$JPEG_STATE" \
        "png" "PNG (.png)" "$PNG_STATE" \
        "webp" "WebP (.webp)" "$WEBP_STATE" \
        2>&1 >/dev/tty); then
        return
    fi

    if [ "$OUTPUT_FORMAT" = "jpeg" ] || [ "$OUTPUT_FORMAT" = "jpg" ]; then
        if ! FORM_DATA=$(dialog --clear --backtitle "Reduce Image and Share" \
            --title "FFmpeg Image Reduction Options" \
            --form "Configure image reduction settings:\nOriginal size: $ORIGINAL_SIZE\nResolution: $IMAGE_INFO" 16 80 3 \
            "Max resolution (e.g., 1920x1080):" 1 1 "$DEFAULT_MAX_RESOLUTION" 1 35 20 0 0 \
            "JPEG quality (2-31, lower=better):" 2 1 "$DEFAULT_GENERAL_QUALITY" 2 35 10 0 0 \
            "Output filename:" 3 1 "$DEFAULT_OUTPUT_TEMPLATE" 3 35 30 0 0 \
            2>&1 >/dev/tty); then
            return
        fi
        MAX_RESOLUTION=$(echo "$FORM_DATA" | sed -n '1p')
        GENERAL_QUALITY=$(echo "$FORM_DATA" | sed -n '2p')
        OUTPUT_TEMPLATE=$(echo "$FORM_DATA" | sed -n '3p')
    elif [ "$OUTPUT_FORMAT" = "png" ]; then
        if ! FORM_DATA=$(dialog --clear --backtitle "Reduce Image and Share" \
            --title "FFmpeg Image Reduction Options" \
            --form "Configure image reduction settings:\nOriginal size: $ORIGINAL_SIZE\nResolution: $IMAGE_INFO" 16 80 3 \
            "Max resolution (e.g., 1920x1080):" 1 1 "$DEFAULT_MAX_RESOLUTION" 1 35 20 0 0 \
            "PNG compression (0-9, higher=smaller):" 2 1 "$DEFAULT_GENERAL_QUALITY" 2 35 10 0 0 \
            "Output filename:" 3 1 "$DEFAULT_OUTPUT_TEMPLATE" 3 35 30 0 0 \
            2>&1 >/dev/tty); then
            return
        fi
        MAX_RESOLUTION=$(echo "$FORM_DATA" | sed -n '1p')
        GENERAL_QUALITY=$(echo "$FORM_DATA" | sed -n '2p')
        OUTPUT_TEMPLATE=$(echo "$FORM_DATA" | sed -n '3p')
    elif [ "$OUTPUT_FORMAT" = "webp" ]; then
        if ! FORM_DATA=$(dialog --clear --backtitle "Reduce Image and Share" \
            --title "FFmpeg Image Reduction Options" \
            --form "Configure image reduction settings:\nOriginal size: $ORIGINAL_SIZE\nResolution: $IMAGE_INFO" 16 80 3 \
            "Max resolution (e.g., 1920x1080):" 1 1 "$DEFAULT_MAX_RESOLUTION" 1 35 20 0 0 \
            "WebP quality (1-100, higher=better):" 2 1 "$DEFAULT_GENERAL_QUALITY" 2 35 10 0 0 \
            "Output filename:" 3 1 "$DEFAULT_OUTPUT_TEMPLATE" 3 35 30 0 0 \
            2>&1 >/dev/tty); then
            return
        fi
        MAX_RESOLUTION=$(echo "$FORM_DATA" | sed -n '1p')
        GENERAL_QUALITY=$(echo "$FORM_DATA" | sed -n '2p')
        OUTPUT_TEMPLATE=$(echo "$FORM_DATA" | sed -n '3p')
    fi

    if [ "$SAVE_CONFIG" = "1" ]; then
        save_config "IMAGE" "IMAGE_OUTPUT_FORMAT=\"$OUTPUT_FORMAT\"
IMAGE_MAX_RESOLUTION=\"$MAX_RESOLUTION\"
IMAGE_GENERAL_QUALITY=\"$GENERAL_QUALITY\"
IMAGE_OUTPUT_TEMPLATE=\"$OUTPUT_TEMPLATE\""
    fi

    OUTPUT_NAME="$OUTPUT_TEMPLATE"
    OUTPUT_NAME="${OUTPUT_NAME//%name/$NAME}"
    
    case $OUTPUT_FORMAT in
        "jpeg"|"jpg")
            OUTPUT_NAME="${OUTPUT_NAME//%ext/jpg}"
            ;;
        "png")
            OUTPUT_NAME="${OUTPUT_NAME//%ext/png}"
            ;;
        "webp")
            OUTPUT_NAME="${OUTPUT_NAME//%ext/webp}"
            ;;
        *)
            OUTPUT_NAME="${OUTPUT_NAME//%ext/jpg}"
            OUTPUT_FORMAT="jpeg"
            ;;
    esac

    OUTPUT_FILE="$CURRENT_DIR/$OUTPUT_NAME"

    FFMPEG_CMD="ffmpeg -y -i \"$INPUT_FILE\""

    if [ "$MAX_RESOLUTION" != "0" ] && [ -n "$MAX_RESOLUTION" ]; then
        FFMPEG_CMD="$FFMPEG_CMD -vf scale=$MAX_RESOLUTION:force_original_aspect_ratio=decrease"
    fi

    # Format-specific options
    case $OUTPUT_FORMAT in
        "jpeg"|"jpg")
            FFMPEG_CMD="$FFMPEG_CMD -q:v $GENERAL_QUALITY"
            ;;
        "png")
            FFMPEG_CMD="$FFMPEG_CMD -compression_level $GENERAL_QUALITY"
            ;;
        "webp")
            FFMPEG_CMD="$FFMPEG_CMD -c:v libwebp -quality $GENERAL_QUALITY"
            ;;
    esac

    FFMPEG_CMD="$FFMPEG_CMD \"$OUTPUT_FILE\""

    { eval "$FFMPEG_CMD" 2>&1 ; } | dialog --progressbox 30 100

    if [ -f "$OUTPUT_FILE" ]; then
        NEW_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
        termux-share -a send "$OUTPUT_FILE"
        dialog --msgbox "Image reduced and shared successfully!\nOriginal: $ORIGINAL_SIZE -> New: $NEW_SIZE\nOutput: $OUTPUT_NAME" 10 60
    else
        dialog --msgbox "Error: Image conversion failed!\nCommand: $FFMPEG_CMD" 16 80
    fi
}

copy_to_current() {
    if [ "$(dirname "$INPUT_FILE")" = "$CURRENT_DIR" ]; then
        dialog --msgbox "File is already in the current directory!" 8 50
        return
    fi

    if ! FORM_DATA=$(dialog --clear --backtitle "Copy to Current Folder" \
        --title "Copy Options" \
        --form "Configure copy settings:" 12 60 2 \
        "New filename:" 1 1 "$BASENAME" 1 15 40 0 \
        "Action (copy/move):" 2 1 "copy" 2 20 10 0 \
        2>&1 >/dev/tty); then
        return
    fi

    NEW_FILENAME=$(echo "$FORM_DATA" | sed -n '1p')
    ACTION=$(echo "$FORM_DATA" | sed -n '2p')
    
    TARGET_FILE="$CURRENT_DIR/$NEW_FILENAME"

    if [ -f "$TARGET_FILE" ]; then
        if ! dialog --yesno "File '$NEW_FILENAME' already exists in current directory.\nOverwrite?" 8 60; then
            return
        fi
    fi

    {
        echo "XXX"
        echo "50"
        if [ "$ACTION" = "move" ]; then
            echo "Moving file..."
        else
            echo "Copying file..."
        fi
        echo "XXX"
        
        if [ "$ACTION" = "move" ]; then
            mv "$INPUT_FILE" "$TARGET_FILE"
        else
            cp "$INPUT_FILE" "$TARGET_FILE"
        fi
        
        echo "XXX"
        echo "100"
        echo "Done!"
        echo "XXX"
    } | dialog --backtitle "Copy to Current Folder" --title "Progress" --gauge "Please wait..." 8 50 0

    if [ -f "$TARGET_FILE" ]; then
        if [ "$ACTION" = "move" ]; then
            dialog --msgbox "File moved successfully to:\n$TARGET_FILE" 8 60
        else
            dialog --msgbox "File copied successfully to:\n$TARGET_FILE" 8 60
        fi
    else
        dialog --msgbox "Error: Failed to $ACTION file!" 8 40
    fi
}

load_config
CHOICE=$(dialog --clear --backtitle "uwu" \
    --title "Main Menu" \
    --menu "What would you like to do with '$BASENAME'?" 15 60 3 \
    1 "Compress to archive and share" \
    2 "Reduce size/resolution (FFmpeg) and share" \
    3 "Copy to current folder" \
    2>&1 >/dev/tty)

case $CHOICE in
    1)
        compress_and_share
        ;;
    2)
        reduce_and_share
        ;;
    3)
        copy_to_current
        ;;
    *)
        clear
        exit 0
        ;;
esac